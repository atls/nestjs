// @generated by protoc-gen-es v1.2.0 with parameter "target=ts+dts"
// @generated from file test.proto (package test, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

/**
 * @generated from message test.TestChild
 */
export class TestChild extends Message<TestChild> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<TestChild>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'test.TestChild'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestChild {
    return new TestChild().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestChild {
    return new TestChild().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestChild {
    return new TestChild().fromJsonString(jsonString, options)
  }

  static equals(
    a: TestChild | PlainMessage<TestChild> | undefined,
    b: TestChild | PlainMessage<TestChild> | undefined
  ): boolean {
    return proto3.util.equals(TestChild, a, b)
  }
}

/**
 * @generated from message test.ExecTestRequest
 */
export class ExecTestRequest extends Message<ExecTestRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: test.TestChild child = 2;
   */
  child?: TestChild

  constructor(data?: PartialMessage<ExecTestRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'test.ExecTestRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'child', kind: 'message', T: TestChild },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecTestRequest {
    return new ExecTestRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecTestRequest {
    return new ExecTestRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecTestRequest {
    return new ExecTestRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ExecTestRequest | PlainMessage<ExecTestRequest> | undefined,
    b: ExecTestRequest | PlainMessage<ExecTestRequest> | undefined
  ): boolean {
    return proto3.util.equals(ExecTestRequest, a, b)
  }
}

/**
 * @generated from message test.ExecTestResponse
 */
export class ExecTestResponse extends Message<ExecTestResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<ExecTestResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'test.ExecTestResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecTestResponse {
    return new ExecTestResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecTestResponse {
    return new ExecTestResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecTestResponse {
    return new ExecTestResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ExecTestResponse | PlainMessage<ExecTestResponse> | undefined,
    b: ExecTestResponse | PlainMessage<ExecTestResponse> | undefined
  ): boolean {
    return proto3.util.equals(ExecTestResponse, a, b)
  }
}
